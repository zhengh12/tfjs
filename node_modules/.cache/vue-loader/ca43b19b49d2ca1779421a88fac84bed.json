{"remainingRequest":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\src\\views\\FaceComparisonMany.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\src\\views\\FaceComparisonMany.vue","mtime":1558766770000},{"path":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as faceapi from \"face-api.js\";\n// 本地图片\nimport 安悦溪1 from \"../assets/images/安悦溪1.jpg\";\nimport 安悦溪2 from \"../assets/images/安悦溪2.jpg\";\nimport 张杰1 from \"../assets/images/张杰1.jpg\";\nimport 张杰2 from \"../assets/images/张杰2.jpg\";\nimport 张杰3 from \"../assets/images/张杰3.jpg\";\nimport 张杰4 from \"../assets/images/张杰4.jpg\";\n\nexport default {\n  name: \"FaceComparisonMany\",\n  props: {\n    msg: String\n  },\n  data() {\n    return {\n      // 人脸对比模型数组对象\n      faceMatcher: null\n    };\n  },\n  mounted() {\n    // 同步执行避免报错\n    this.init();\n  },\n  methods: {\n    // 同步执行避免报错\n    async init() {\n      await faceapi.loadFaceRecognitionModel(\"/models\");\n      this.faceMatcher = await this.createFaceMatcher();\n      await this.runArray();\n    },\n    // 人脸对比模型数组对象\n    async createFaceMatcher() {\n      // 模型里的图片，一人多张图片\n      // const picArray = [\n      //   {\n      //     name: \"安悦溪\",\n      //     img: [\"https://dwz.cn/Fi5mUbYK\", \"https://dwz.cn/kXUrwcGG\"]\n      //   },\n      //   {\n      //     name: \"张杰\",\n      //     img: [\"https://dwz.cn/PVtFiWoI\"]\n      //   }\n      // ];\n      const picArray = [\n        {\n          name: \"安悦溪\",\n          img: [安悦溪1, 安悦溪2]\n        },\n        {\n          name: \"张杰\",\n          img: [张杰1, 张杰2]\n        }\n      ];\n\n      // 预存图片转码数组\n      const labeledFaceDescriptors = await Promise.all(\n        picArray.map(async (pic, index) => {\n          console.log(pic.name, pic.img);\n          // 用数组存储图片转码数据\n          const descriptors = [];\n          for (const imgage of pic.img) {\n            const img = await faceapi.fetchImage(imgage);\n            descriptors.push(await faceapi.computeFaceDescriptor(img));\n          }\n          // 返回图片用户和图片转码数组\n          return new faceapi.LabeledFaceDescriptors(pic.name, descriptors);\n        })\n      );\n      console.log(\"图片转码数组对象\", labeledFaceDescriptors);\n      return new faceapi.FaceMatcher(labeledFaceDescriptors);\n    },\n    // 对比图片\n    async runArray() {\n      // 使用对比模型里的图片，用几张张图片与模型组里做对比\n      // const picArrays = [\"https://dwz.cn/ZggSBEtL\", \"https://dwz.cn/U7nR0no0\"];\n      const picArrays = [张杰3, 张杰4, 张杰1];\n      // 遍历对比里图片\n      for (const key in picArrays) {\n        if (picArrays.hasOwnProperty(key)) {\n          const element = picArrays[key];\n          // 数组遍历开始\n          console.log(\"开始对比：\", element);\n          const ts = Date.now();\n          // 获取图片base64\n          const input = await faceapi.fetchImage(element);\n          // 图片转码\n          const descriptor = await faceapi.computeFaceDescriptor(input);\n          // 图片鉴别\n          const bestMatch = await this.faceMatcher.findBestMatch(descriptor);\n          // 鉴别效果\n          console.log(\n            \"鉴别结果：\" + bestMatch.toString(),\n            \"鉴别时间：\" + `${Date.now() - ts} ms`,\n            \"FPS：\" + faceapi.round(1000 / (Date.now() - ts))\n          );\n          // 数组遍历结束\n        }\n      }\n    }\n  }\n};\n",{"version":3,"sources":["FaceComparisonMany.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAefile":"FaceComparisonMany.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"FaceComparisonMany\">\n    <p>不好意思，请打开浏览器看控制台查看输出日志</p>\n    <br>\n    <img id=\"face1\" src=\"../assets/images/安悦溪1.jpg\" width=\"300\">\n    <img id=\"face2\" src=\"../assets/images/安悦溪2.jpg\" width=\"300\">\n    <img id=\"face3\" src=\"../assets/images/张杰1.jpg\" width=\"300\">\n    <img id=\"face4\" src=\"../assets/images/张杰2.jpg\" width=\"300\">\n    <br>\n    <img id=\"face5\" src=\"../assets/images/张杰3.jpg\" width=\"300\">\n    <img id=\"face6\" src=\"../assets/images/张杰4.jpg\" width=\"300\">\n  </div>\n</template>\n\n<script>\nimport * as faceapi from \"face-api.js\";\n// 本地图片\nimport 安悦溪1 from \"../assets/images/安悦溪1.jpg\";\nimport 安悦溪2 from \"../assets/images/安悦溪2.jpg\";\nimport 张杰1 from \"../assets/images/张杰1.jpg\";\nimport 张杰2 from \"../assets/images/张杰2.jpg\";\nimport 张杰3 from \"../assets/images/张杰3.jpg\";\nimport 张杰4 from \"../assets/images/张杰4.jpg\";\n\nexport default {\n  name: \"FaceComparisonMany\",\n  props: {\n    msg: String\n  },\n  data() {\n    return {\n      // 人脸对比模型数组对象\n      faceMatcher: null\n    };\n  },\n  mounted() {\n    // 同步执行避免报错\n    this.init();\n  },\n  methods: {\n    // 同步执行避免报错\n    async init() {\n      await faceapi.loadFaceRecognitionModel(\"/models\");\n      this.faceMatcher = await this.createFaceMatcher();\n      await this.runArray();\n    },\n    // 人脸对比模型数组对象\n    async createFaceMatcher() {\n      // 模型里的图片，一人多张图片\n      // const picArray = [\n      //   {\n      //     name: \"安悦溪\",\n      //     img: [\"https://dwz.cn/Fi5mUbYK\", \"https://dwz.cn/kXUrwcGG\"]\n      //   },\n      //   {\n      //     name: \"张杰\",\n      //     img: [\"https://dwz.cn/PVtFiWoI\"]\n      //   }\n      // ];\n      const picArray = [\n        {\n          name: \"安悦溪\",\n          img: [安悦溪1, 安悦溪2]\n        },\n        {\n          name: \"张杰\",\n          img: [张杰1, 张杰2]\n        }\n      ];\n\n      // 预存图片转码数组\n      const labeledFaceDescriptors = await Promise.all(\n        picArray.map(async (pic, index) => {\n          console.log(pic.name, pic.img);\n          // 用数组存储图片转码数据\n          const descriptors = [];\n          for (const imgage of pic.img) {\n            const img = await faceapi.fetchImage(imgage);\n            descriptors.push(await faceapi.computeFaceDescriptor(img));\n          }\n          // 返回图片用户和图片转码数组\n          return new faceapi.LabeledFaceDescriptors(pic.name, descriptors);\n        })\n      );\n      console.log(\"图片转码数组对象\", labeledFaceDescriptors);\n      return new faceapi.FaceMatcher(labeledFaceDescriptors);\n    },\n    // 对比图片\n    async runArray() {\n      // 使用对比模型里的图片，用几张张图片与模型组里做对比\n      // const picArrays = [\"https://dwz.cn/ZggSBEtL\", \"https://dwz.cn/U7nR0no0\"];\n      const picArrays = [张杰3, 张杰4, 张杰1];\n      // 遍历对比里图片\n      for (const key in picArrays) {\n        if (picArrays.hasOwnProperty(key)) {\n          const element = picArrays[key];\n          // 数组遍历开始\n          console.log(\"开始对比：\", element);\n          const ts = Date.now();\n          // 获取图片base64\n          const input = await faceapi.fetchImage(element);\n          // 图片转码\n          const descriptor = await faceapi.computeFaceDescriptor(input);\n          // 图片鉴别\n          const bestMatch = await this.faceMatcher.findBestMatch(descriptor);\n          // 鉴别效果\n          console.log(\n            \"鉴别结果：\" + bestMatch.toString(),\n            \"鉴别时间：\" + `${Date.now() - ts} ms`,\n            \"FPS：\" + faceapi.round(1000 / (Date.now() - ts))\n          );\n          // 数组遍历结束\n        }\n      }\n    }\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n</style>\n"]}]}