{"remainingRequest":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\src\\utils\\bbt.js","dependencies":[{"path":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\src\\utils\\bbt.js","mtime":1573803526915},{"path":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\1\\\\Desktop\\\\tensorflowjs\\\\face-api-demo-vue-master\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport * as faceapi from \"face-api.js\";\nvar classes = ['amy', 'bernadette', 'howard', 'leonard', 'penny', 'raj', 'sheldon', 'stuart', 'TaylorSwift'];\n\nfunction getFaceImageUri(className, idx) {\n  return require(\"../assets/images/\" + className + \"/\" + className + idx + \".png\" || \"../assets/images/\" + className + \"/\" + className + idx + \".jpg\" || \"../assets/images/\" + className + \"/\" + className + idx + \".jpeg\"); //`/src/assets/images/${className}/${className}${idx}.png`\n}\n\nfunction renderFaceImageSelectList(selectListId, onChange, initialValue) {\n  var indices = [1, 2, 3, 4, 5];\n\n  function renderChildren(select) {\n    classes.forEach(function (className) {\n      var optgroup = document.createElement('optgroup');\n      optgroup.label = className;\n      select.appendChild(optgroup);\n      indices.forEach(function (imageIdx) {\n        return renderOption(optgroup, \"\".concat(className, \" \").concat(imageIdx), getFaceImageUri(className, imageIdx));\n      });\n    });\n  }\n\n  renderSelectList(selectListId, onChange, getFaceImageUri(initialValue.className, initialValue.imageIdx), renderChildren);\n} // fetch first image of each class and compute their descriptors\n//将每个人所属文件夹的第一张图片取出再计算他们的特征\n\n\nfunction createBbtFaceMatcher() {\n  return _createBbtFaceMatcher.apply(this, arguments);\n}\n\nfunction _createBbtFaceMatcher() {\n  _createBbtFaceMatcher = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee2() {\n    var numImagesForTraining,\n        maxAvailableImagesPerClass,\n        labeledFaceDescriptors,\n        _args2 = arguments;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            numImagesForTraining = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : 1;\n            maxAvailableImagesPerClass = 5;\n            numImagesForTraining = Math.min(numImagesForTraining, maxAvailableImagesPerClass);\n            _context2.next = 5;\n            return Promise.all(classes.map(\n            /*#__PURE__*/\n            function () {\n              var _ref = _asyncToGenerator(\n              /*#__PURE__*/\n              regeneratorRuntime.mark(function _callee(className) {\n                var descriptors, i, img, j, _i, descriptor;\n\n                return regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        descriptors = [];\n                        i = 1;\n\n                      case 2:\n                        if (!(i < numImagesForTraining + 1)) {\n                          _context.next = 14;\n                          break;\n                        }\n\n                        _context.next = 5;\n                        return faceapi.fetchImage(getFaceImageUri(className, i));\n\n                      case 5:\n                        img = _context.sent;\n                        _context.t0 = descriptors;\n                        _context.next = 9;\n                        return faceapi.computeFaceDescriptor(img);\n\n                      case 9:\n                        _context.t1 = _context.sent;\n\n                        _context.t0.push.call(_context.t0, _context.t1);\n\n                      case 11:\n                        i++;\n                        _context.next = 2;\n                        break;\n\n                      case 14:\n                        for (j = 0; j < 128; j++) {\n                          for (_i = 1; _i < descriptors.length; _i++) {\n                            descriptors[0][j] += descriptors[_i][j];\n                          }\n\n                          descriptors[0][j] = descriptors[0][j] / descriptors.length;\n                        } // for(let j=0; j<128; j++){\n                        //   let arr = []\n                        //   for(let i=1; i<descriptors.length; i++){\n                        //     arr.push(descriptors[i][j])\n                        //   }\n                        //   arr.sort((a,b)=>{return a-b})\n                        //   descriptors[0][j] = arr[2]\n                        // }\n\n\n                        descriptor = [];\n                        descriptor.push(descriptors[0]);\n                        return _context.abrupt(\"return\", new faceapi.LabeledFaceDescriptors(className, descriptor));\n\n                      case 18:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function (_x) {\n                return _ref.apply(this, arguments);\n              };\n            }()));\n\n          case 5:\n            labeledFaceDescriptors = _context2.sent;\n            console.log(labeledFaceDescriptors);\n            return _context2.abrupt(\"return\", new faceapi.FaceMatcher(labeledFaceDescriptors));\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _createBbtFaceMatcher.apply(this, arguments);\n}\n\nexport { renderFaceImageSelectList, createBbtFaceMatcher };",{"version":3,"sources":["C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\src\\utils\\bbt.js"],"names":["faceapi","classes","getFaceImageUri","className","idx","require","renderFaceImageSelectList","selectListId","onChange","initialValue","indices","renderChildren","select","forEach","optgroup","document","createElement","label","appendChild","imageIdx","renderOption","renderSelectList","createBbtFaceMatcher","numImagesForTraining","maxAvailableImagesPerClass","Math","min","Promise","all","map","descriptors","i","fetchImage","img","computeFaceDescriptor","push","j","length","descriptor","LabeledFaceDescriptors","labeledFaceDescriptors","console","log","FaceMatcher"],"mappings":"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","sourcesContent":["import * as faceapi from \"face-api.js\";\n\nconst classes = ['amy', 'bernadette', 'howard', 'leonard', 'penny', 'raj', 'sheldon', 'stuart', 'TaylorSwift']\n\n\nfunction getFaceImageUri(className, idx) {\n  return require(\"../assets/images/\"+className+\"/\"+className+idx+\".png\"||\"../assets/images/\"+className+\"/\"+className+idx+\".jpg\"||\"../assets/images/\"+className+\"/\"+className+idx+\".jpeg\")\n  //`/src/assets/images/${className}/${className}${idx}.png`\n}\n\nfunction renderFaceImageSelectList(selectListId, onChange, initialValue) {\n  const indices = [1, 2, 3, 4, 5]\n  function renderChildren(select) {\n    classes.forEach(className => {\n      const optgroup = document.createElement('optgroup')\n      optgroup.label = className\n      select.appendChild(optgroup)\n      indices.forEach(imageIdx =>\n        renderOption(\n          optgroup,\n          `${className} ${imageIdx}`,\n          getFaceImageUri(className, imageIdx)\n        )\n      )\n    })\n  }\n\n  renderSelectList(\n    selectListId,\n    onChange,\n    getFaceImageUri(initialValue.className, initialValue.imageIdx),\n    renderChildren\n  )\n}\n\n// fetch first image of each class and compute their descriptors\n//将每个人所属文件夹的第一张图片取出再计算他们的特征\nasync function createBbtFaceMatcher(numImagesForTraining = 1) {\n  const maxAvailableImagesPerClass = 5\n  numImagesForTraining = Math.min(numImagesForTraining, maxAvailableImagesPerClass)\n\n  const labeledFaceDescriptors = await Promise.all(classes.map(\n    async className => {\n      let descriptors = []\n      for (let i = 1; i < (numImagesForTraining + 1); i++) {\n        const img = await faceapi.fetchImage(getFaceImageUri(className, i))\n        descriptors.push(await faceapi.computeFaceDescriptor(img))\n      }\n      for(let j=0; j<128; j++){\n        for(let i=1; i<descriptors.length; i++){\n          descriptors[0][j] += descriptors[i][j]\n        }\n        descriptors[0][j] = descriptors[0][j] / descriptors.length\n      }\n\n      // for(let j=0; j<128; j++){\n      //   let arr = []\n      //   for(let i=1; i<descriptors.length; i++){\n      //     arr.push(descriptors[i][j])\n      //   }\n      //   arr.sort((a,b)=>{return a-b})\n      //   descriptors[0][j] = arr[2]\n      // }\n\n      let descriptor = []\n      descriptor.push(descriptors[0])\n      return new faceapi.LabeledFaceDescriptors(\n        className,\n        descriptor\n      )\n    }\n  ))\n  console.log(labeledFaceDescriptors)\n  return new faceapi.FaceMatcher(labeledFaceDescriptors)\n}\n\nexport{\n  renderFaceImageSelectList as renderFaceImageSelectList,\n  createBbtFaceMatcher as createBbtFaceMatcher\n}"]}]}