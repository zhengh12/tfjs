{"remainingRequest":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\src\\views\\VideoMediaCanvasStream.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\src\\views\\VideoMediaCanvasStream.vue","mtime":1558766770000},{"path":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _typeof from \"C:\\\\Users\\\\1\\\\Desktop\\\\tensorflowjs\\\\face-api-demo-vue-master\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/typeof\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\1\\\\Desktop\\\\tensorflowjs\\\\face-api-demo-vue-master\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as faceapi from \"face-api.js\";\nexport default {\n  name: \"VideoMediaCanvasStream\",\n  data: function data() {\n    return {\n      videoEl: {},\n      canvasEL: {},\n      facingMode: false,\n      userMediaConstraints: {\n        audio: false,\n        video: {\n          // ideal（应用最理想的）\n          width: {\n            min: 320,\n            ideal: 1280,\n            max: 1920\n          },\n          height: {\n            min: 240,\n            ideal: 720,\n            max: 1080\n          },\n          // frameRate受限带宽传输时，低帧率可能更适宜\n          frameRate: {\n            min: 15,\n            ideal: 30,\n            max: 60\n          },\n          // 摄像头翻转\n          facingMode: this.facingMode ? \"user\" : \"environment\"\n        }\n      },\n      timeInterval: 0,\n      failCount: 0\n    };\n  },\n  created: function created() {\n    this.init();\n  },\n  methods: {\n    // 初始化\n    init: function () {\n      var _init = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return faceapi.loadTinyFaceDetectorModel(\"/models\");\n\n              case 2:\n                // dom元素\n                this.videoEl = this.$refs.videoDom;\n                this.canvasEL = this.$refs.canvasDOM; // 启动WebRTC驱动摄像头视频媒体\n\n                _context.next = 6;\n                return navigator.mediaDevices.getUserMedia(this.userMediaConstraints).then(this.getMediaStreamSuccess).catch(this.getMediaStreamError);\n\n              case 6:\n                _context.next = 8;\n                return this.onPlay();\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function init() {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }(),\n    // 视频绘制图像框\n    onPlay: function () {\n      var _onPlay = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var _this = this;\n\n        var ts, faceDetectionTask, ctx, linearGradient, runTime;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // 时间计时\n                ts = Date.now(); // 判断视频对象是否暂停结束\n\n                if (!(this.videoEl.paused || this.videoEl.ended)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                this.timeInterval = setInterval(function () {\n                  return _this.onPlay();\n                });\n                return _context2.abrupt(\"return\");\n\n              case 4:\n                _context2.next = 6;\n                return faceapi.detectSingleFace(this.videoEl, new faceapi.TinyFaceDetectorOptions({\n                  inputSize: 512,\n                  scoreThreshold: 0.5\n                }));\n\n              case 6:\n                faceDetectionTask = _context2.sent;\n\n                // 判断人脸扫描结果\n                if (faceDetectionTask) {\n                  this.failCount = 0; // 画布绘制人脸框\n\n                  this.drawDetections(this.videoEl, this.canvasEL, [faceDetectionTask]);\n                } else {\n                  this.failCount += 1;\n\n                  if (this.failCount > 20) {\n                    this.canvasEL.width = this.videoEl.videoWidth;\n                    this.canvasEL.height = this.videoEl.videoHeight; // 画布绘制\n\n                    ctx = this.canvasEL.getContext(\"2d\");\n                    linearGradient = ctx.createLinearGradient(0, 0, 300, 0);\n                    linearGradient.addColorStop(\"0\", \"#40E0D0\");\n                    linearGradient.addColorStop(\"0.5\", \"#FF8C00\");\n                    linearGradient.addColorStop(\"1.0\", \"#FF0080\"); // 绘制信息\n\n                    ctx.font = \"35px FZShuTi\";\n                    ctx.fillStyle = linearGradient;\n                    ctx.fillText(\"请将进入检测区\", 20, 50);\n                  }\n\n                  console.log(this.failCount, \"检测失败\");\n                } // 绘制刷新状态\n\n\n                runTime = {\n                  time: Math.round(Date.now() - ts),\n                  fps: faceapi.round(1000 / (Date.now() - ts))\n                }; // 绘制时间\n\n                console.log(\"绘制时间:\", runTime);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function onPlay() {\n        return _onPlay.apply(this, arguments);\n      }\n\n      return onPlay;\n    }(),\n    // 人脸框绘制\n    drawDetections: function drawDetections(dimensions, canvas, detections) {\n      // 初始画布大小\n      canvas.width = dimensions.videoWidth;\n      canvas.height = dimensions.videoHeight; // 视频对象人脸框在画布中绘制\n\n      detections.forEach(function (det) {\n        var _det$box = det.box,\n            x = _det$box.x,\n            y = _det$box.y,\n            width = _det$box.width,\n            height = _det$box.height;\n        var ctx = canvas.getContext(\"2d\");\n        ctx.strokeStyle = \"red\";\n        ctx.lineWidth = 4;\n        ctx.strokeRect(x, y, width, height);\n      });\n    },\n    // 视频媒体流成功\n    getMediaStreamSuccess: function getMediaStreamSuccess(stream) {\n      window.stream = stream; // make stream available to browser console\n\n      this.videoEl.srcObject = stream;\n    },\n    // 视频媒体流失败\n    getMediaStreamError: function getMediaStreamError(error) {\n      alert(\"视频媒体流获取错误\" + error);\n    },\n    // 结束媒体流\n    stopMediaStreamTrack: function stopMediaStreamTrack() {\n      clearInterval(this.timeInterval);\n\n      if (_typeof(window.stream) === \"object\") {\n        this.videoEl.srcObject = null;\n        window.stream.getTracks().forEach(function (track) {\n          return track.stop();\n        });\n      }\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.stopMediaStreamTrack();\n  }\n};",{"version":3,"sources":["VideoMediaCanvasStream.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"media\">\n    <video\n      class=\"media-video\"\n      poster=\"https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&quality=100&size=b4000_4000&sec=1558759758&di=ccd0b08f63f2b6ea3ca08b651c4fa5f1&src=http://b-ssl.duitang.com/uploads/item/201610/05/20161005105402_xiLsK.thumb.700_0.jpeg\"\n      ref=\"videoDom\"\n      playsinline\n      autoplay\n    ></video>\n    <canvas class=\"media-canvas\" ref=\"canvasDOM\"></canvas>\n  </div>\n</template>\n\n<script>\nimport * as faceapi from \"face-api.js\";\n\nexport default {\n  name: \"VideoMediaCanvasStream\",\n  data() {\n    return {\n      videoEl: {},\n      canvasEL: {},\n      facingMode: false,\n      userMediaConstraints: {\n        audio: false,\n        video: {\n          // ideal（应用最理想的）\n          width: {\n            min: 320,\n            ideal: 1280,\n            max: 1920\n          },\n          height: {\n            min: 240,\n            ideal: 720,\n            max: 1080\n          },\n          // frameRate受限带宽传输时，低帧率可能更适宜\n          frameRate: {\n            min: 15,\n            ideal: 30,\n            max: 60\n          },\n          // 摄像头翻转\n          facingMode: this.facingMode ? \"user\" : \"environment\"\n        }\n      },\n      timeInterval: 0,\n      failCount: 0\n    };\n  },\n  created() {\n    this.init();\n  },\n  methods: {\n    // 初始化\n    async init() {\n      // 加载模型\n      await faceapi.loadTinyFaceDetectorModel(\"/models\");\n      // dom元素\n      this.videoEl = this.$refs.videoDom;\n      this.canvasEL = this.$refs.canvasDOM;\n      // 启动WebRTC驱动摄像头视频媒体\n      await navigator.mediaDevices\n        .getUserMedia(this.userMediaConstraints)\n        .then(this.getMediaStreamSuccess)\n        .catch(this.getMediaStreamError);\n      // 启动检测\n      await this.onPlay();\n    },\n    // 视频绘制图像框\n    async onPlay() {\n      // 时间计时\n      const ts = Date.now();\n      // 判断视频对象是否暂停结束\n      if (this.videoEl.paused || this.videoEl.ended) {\n        this.timeInterval = setInterval(() => this.onPlay());\n        return;\n      }\n      // 简单人脸检测扫描\n      const faceDetectionTask = await faceapi.detectSingleFace(\n        this.videoEl,\n        new faceapi.TinyFaceDetectorOptions({\n          inputSize: 512,\n          scoreThreshold: 0.5\n        })\n      );\n      // 判断人脸扫描结果\n      if (faceDetectionTask) {\n        this.failCount = 0;\n        // 画布绘制人脸框\n        this.drawDetections(this.videoEl, this.canvasEL, [faceDetectionTask]);\n      } else {\n        this.failCount += 1;\n        if (this.failCount > 20) {\n          this.canvasEL.width = this.videoEl.videoWidth;\n          this.canvasEL.height = this.videoEl.videoHeight;\n          // 画布绘制\n          const ctx = this.canvasEL.getContext(\"2d\");\n          const linearGradient = ctx.createLinearGradient(0, 0, 300, 0);\n          linearGradient.addColorStop(\"0\", \"#40E0D0\");\n          linearGradient.addColorStop(\"0.5\", \"#FF8C00\");\n          linearGradient.addColorStop(\"1.0\", \"#FF0080\");\n          // 绘制信息\n          ctx.font = \"35px FZShuTi\";\n          ctx.fillStyle = linearGradient;\n          ctx.fillText(\"请将进入检测区\", 20, 50);\n        }\n        console.log(this.failCount, \"检测失败\");\n      }\n      // 绘制刷新状态\n      const runTime = {\n        time: Math.round(Date.now() - ts),\n        fps: faceapi.round(1000 / (Date.now() - ts))\n      };\n      // 绘制时间\n      console.log(\"绘制时间:\", runTime);\n    },\n    // 人脸框绘制\n    drawDetections(dimensions, canvas, detections) {\n      // 初始画布大小\n      canvas.width = dimensions.videoWidth;\n      canvas.height = dimensions.videoHeight;\n      // 视频对象人脸框在画布中绘制\n      detections.forEach(det => {\n        const { x, y, width, height } = det.box;\n        const ctx = canvas.getContext(\"2d\");\n        ctx.strokeStyle = \"red\";\n        ctx.lineWidth = 4;\n        ctx.strokeRect(x, y, width, height);\n      });\n    },\n    // 视频媒体流成功\n    getMediaStreamSuccess(stream) {\n      window.stream = stream; // make stream available to browser console\n      this.videoEl.srcObject = stream;\n    },\n    // 视频媒体流失败\n    getMediaStreamError(error) {\n      alert(\"视频媒体流获取错误\" + error);\n    },\n    // 结束媒体流\n    stopMediaStreamTrack() {\n      clearInterval(this.timeInterval);\n      if (typeof window.stream === \"object\") {\n        this.videoEl.srcObject = null;\n        window.stream.getTracks().forEach(track => track.stop());\n      }\n    }\n  },\n  beforeDestroy() {\n    this.stopMediaStreamTrack();\n  }\n};\n</script>\n\n<style scoped>\n.media {\n  position: relative;\n}\n.media-video {\n  max-height: 860px;\n  height: 100%;\n  width: 100%;\n  display: block;\n  background-color: #242424;\n}\n.media-canvas {\n  position: absolute;\n  left: 0;\n  top: 0;\n  height: 100%;\n  width: 100%;\n}\n</style>\n"],"sourceRoot":"src/views"}]}