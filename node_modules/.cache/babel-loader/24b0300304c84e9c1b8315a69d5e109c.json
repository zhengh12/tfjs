{"remainingRequest":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\src\\views\\FaceComparisonMany.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\src\\views\\FaceComparisonMany.vue","mtime":1558766770000},{"path":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\1\\\\Desktop\\\\tensorflowjs\\\\face-api-demo-vue-master\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as faceapi from \"face-api.js\"; // 本地图片\n\nimport 安悦溪1 from \"../assets/images/\\u5B89\\u60A6\\u6EAA1.jpg\";\nimport 安悦溪2 from \"../assets/images/\\u5B89\\u60A6\\u6EAA2.jpg\";\nimport 张杰1 from \"../assets/images/\\u5F20\\u67701.jpg\";\nimport 张杰2 from \"../assets/images/\\u5F20\\u67702.jpg\";\nimport 张杰3 from \"../assets/images/\\u5F20\\u67703.jpg\";\nimport 张杰4 from \"../assets/images/\\u5F20\\u67704.jpg\";\nexport default {\n  name: \"FaceComparisonMany\",\n  props: {\n    msg: String\n  },\n  data: function data() {\n    return {\n      // 人脸对比模型数组对象\n      faceMatcher: null\n    };\n  },\n  mounted: function mounted() {\n    // 同步执行避免报错\n    this.init();\n  },\n  methods: {\n    // 同步执行避免报错\n    init: function () {\n      var _init = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return faceapi.loadFaceRecognitionModel(\"/models\");\n\n              case 2:\n                _context.next = 4;\n                return this.createFaceMatcher();\n\n              case 4:\n                this.faceMatcher = _context.sent;\n                _context.next = 7;\n                return this.runArray();\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function init() {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }(),\n    // 人脸对比模型数组对象\n    createFaceMatcher: function () {\n      var _createFaceMatcher = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var picArray, labeledFaceDescriptors;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // 模型里的图片，一人多张图片\n                // const picArray = [\n                //   {\n                //     name: \"安悦溪\",\n                //     img: [\"https://dwz.cn/Fi5mUbYK\", \"https://dwz.cn/kXUrwcGG\"]\n                //   },\n                //   {\n                //     name: \"张杰\",\n                //     img: [\"https://dwz.cn/PVtFiWoI\"]\n                //   }\n                // ];\n                picArray = [{\n                  name: \"安悦溪\",\n                  img: [安悦溪1, 安悦溪2]\n                }, {\n                  name: \"张杰\",\n                  img: [张杰1, 张杰2]\n                }]; // 预存图片转码数组\n\n                _context3.next = 3;\n                return Promise.all(picArray.map(\n                /*#__PURE__*/\n                function () {\n                  var _ref = _asyncToGenerator(\n                  /*#__PURE__*/\n                  regeneratorRuntime.mark(function _callee2(pic, index) {\n                    var descriptors, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, imgage, img;\n\n                    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            console.log(pic.name, pic.img); // 用数组存储图片转码数据\n\n                            descriptors = [];\n                            _iteratorNormalCompletion = true;\n                            _didIteratorError = false;\n                            _iteratorError = undefined;\n                            _context2.prev = 5;\n                            _iterator = pic.img[Symbol.iterator]();\n\n                          case 7:\n                            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                              _context2.next = 20;\n                              break;\n                            }\n\n                            imgage = _step.value;\n                            _context2.next = 11;\n                            return faceapi.fetchImage(imgage);\n\n                          case 11:\n                            img = _context2.sent;\n                            _context2.t0 = descriptors;\n                            _context2.next = 15;\n                            return faceapi.computeFaceDescriptor(img);\n\n                          case 15:\n                            _context2.t1 = _context2.sent;\n\n                            _context2.t0.push.call(_context2.t0, _context2.t1);\n\n                          case 17:\n                            _iteratorNormalCompletion = true;\n                            _context2.next = 7;\n                            break;\n\n                          case 20:\n                            _context2.next = 26;\n                            break;\n\n                          case 22:\n                            _context2.prev = 22;\n                            _context2.t2 = _context2[\"catch\"](5);\n                            _didIteratorError = true;\n                            _iteratorError = _context2.t2;\n\n                          case 26:\n                            _context2.prev = 26;\n                            _context2.prev = 27;\n\n                            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                              _iterator.return();\n                            }\n\n                          case 29:\n                            _context2.prev = 29;\n\n                            if (!_didIteratorError) {\n                              _context2.next = 32;\n                              break;\n                            }\n\n                            throw _iteratorError;\n\n                          case 32:\n                            return _context2.finish(29);\n\n                          case 33:\n                            return _context2.finish(26);\n\n                          case 34:\n                            return _context2.abrupt(\"return\", new faceapi.LabeledFaceDescriptors(pic.name, descriptors));\n\n                          case 35:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, null, [[5, 22, 26, 34], [27,, 29, 33]]);\n                  }));\n\n                  return function (_x, _x2) {\n                    return _ref.apply(this, arguments);\n                  };\n                }()));\n\n              case 3:\n                labeledFaceDescriptors = _context3.sent;\n                console.log(\"图片转码数组对象\", labeledFaceDescriptors);\n                return _context3.abrupt(\"return\", new faceapi.FaceMatcher(labeledFaceDescriptors));\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function createFaceMatcher() {\n        return _createFaceMatcher.apply(this, arguments);\n      }\n\n      return createFaceMatcher;\n    }(),\n    // 对比图片\n    runArray: function () {\n      var _runArray = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        var picArrays, key, element, ts, input, descriptor, bestMatch;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                // 使用对比模型里的图片，用几张张图片与模型组里做对比\n                // const picArrays = [\"https://dwz.cn/ZggSBEtL\", \"https://dwz.cn/U7nR0no0\"];\n                picArrays = [张杰3, 张杰4, 张杰1]; // 遍历对比里图片\n\n                _context4.t0 = regeneratorRuntime.keys(picArrays);\n\n              case 2:\n                if ((_context4.t1 = _context4.t0()).done) {\n                  _context4.next = 20;\n                  break;\n                }\n\n                key = _context4.t1.value;\n\n                if (!picArrays.hasOwnProperty(key)) {\n                  _context4.next = 18;\n                  break;\n                }\n\n                element = picArrays[key]; // 数组遍历开始\n\n                console.log(\"开始对比：\", element);\n                ts = Date.now(); // 获取图片base64\n\n                _context4.next = 10;\n                return faceapi.fetchImage(element);\n\n              case 10:\n                input = _context4.sent;\n                _context4.next = 13;\n                return faceapi.computeFaceDescriptor(input);\n\n              case 13:\n                descriptor = _context4.sent;\n                _context4.next = 16;\n                return this.faceMatcher.findBestMatch(descriptor);\n\n              case 16:\n                bestMatch = _context4.sent;\n                // 鉴别效果\n                console.log(\"鉴别结果：\" + bestMatch.toString(), \"鉴别时间：\" + \"\".concat(Date.now() - ts, \" ms\"), \"FPS：\" + faceapi.round(1000 / (Date.now() - ts))); // 数组遍历结束\n\n              case 18:\n                _context4.next = 2;\n                break;\n\n              case 20:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function runArray() {\n        return _runArray.apply(this, arguments);\n      }\n\n      return runArray;\n    }()\n  }\n};",{"version":3,"sources":["FaceComparisonMany.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAeA,OAAA,KAAA,OAAA,MAAA,aAAA,C,CACA;;AACA,OAAA,IAAA;AACA,OAAA,IAAA;AACA,OAAA,GAAA;AACA,OAAA,GAAA;AACA,OAAA,GAAA;AACA,OAAA,GAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,oBADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,GAAA,EAAA;AADA,GAFA;AAKA,EAAA,IALA,kBAKA;AACA,WAAA;AACA;AACA,MAAA,WAAA,EAAA;AAFA,KAAA;AAIA,GAVA;AAWA,EAAA,OAXA,qBAWA;AACA;AACA,SAAA,IAAA;AACA,GAdA;AAeA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,IAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAGA,OAAA,CAAA,wBAAA,CAAA,SAAA,CAHA;;AAAA;AAAA;AAAA,uBAIA,KAAA,iBAAA,EAJA;;AAAA;AAIA,qBAAA,WAJA;AAAA;AAAA,uBAKA,KAAA,QAAA,EALA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAOA;AACA,IAAA,iBARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAA,QApBA,GAoBA,CACA;AACA,kBAAA,IAAA,EAAA,KADA;AAEA,kBAAA,GAAA,EAAA,CAAA,IAAA,EAAA,IAAA;AAFA,iBADA,EAKA;AACA,kBAAA,IAAA,EAAA,IADA;AAEA,kBAAA,GAAA,EAAA,CAAA,GAAA,EAAA,GAAA;AAFA,iBALA,CApBA,EA+BA;;AA/BA;AAAA,uBAgCA,OAAA,CAAA,GAAA,CACA,QAAA,CAAA,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAA,kBAAA,GAAA,EAAA,KAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA,4BAAA,OAAA,CAAA,GAAA,CAAA,GAAA,CAAA,IAAA,EAAA,GAAA,CAAA,GAAA,EADA,CAEA;;AACA,4BAAA,WAHA,GAGA,EAHA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAIA,GAAA,CAAA,GAJA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,4BAAA,MAJA;AAAA;AAAA,mCAKA,OAAA,CAAA,UAAA,CAAA,MAAA,CALA;;AAAA;AAKA,4BAAA,GALA;AAAA,2CAMA,WANA;AAAA;AAAA,mCAMA,OAAA,CAAA,qBAAA,CAAA,GAAA,CANA;;AAAA;AAAA;;AAAA,yCAMA,IANA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,8DASA,IAAA,OAAA,CAAA,sBAAA,CAAA,GAAA,CAAA,IAAA,EAAA,WAAA,CATA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAA;;AAAA;AAAA;AAAA;AAAA,oBADA,CAhCA;;AAAA;AAgCA,gBAAA,sBAhCA;AA6CA,gBAAA,OAAA,CAAA,GAAA,CAAA,UAAA,EAAA,sBAAA;AA7CA,kDA8CA,IAAA,OAAA,CAAA,WAAA,CAAA,sBAAA,CA9CA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAgDA;AACA,IAAA,QAjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkDA;AACA;AACA,gBAAA,SApDA,GAoDA,CAAA,GAAA,EAAA,GAAA,EAAA,GAAA,CApDA,EAqDA;;AArDA,uDAsDA,SAtDA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsDA,gBAAA,GAtDA;;AAAA,qBAuDA,SAAA,CAAA,cAAA,CAAA,GAAA,CAvDA;AAAA;AAAA;AAAA;;AAwDA,gBAAA,OAxDA,GAwDA,SAAA,CAAA,GAAA,CAxDA,EAyDA;;AACA,gBAAA,OAAA,CAAA,GAAA,CAAA,OAAA,EAAA,OAAA;AACA,gBAAA,EA3DA,GA2DA,IAAA,CAAA,GAAA,EA3DA,EA4DA;;AA5DA;AAAA,uBA6DA,OAAA,CAAA,UAAA,CAAA,OAAA,CA7DA;;AAAA;AA6DA,gBAAA,KA7DA;AAAA;AAAA,uBA+DA,OAAA,CAAA,qBAAA,CAAA,KAAA,CA/DA;;AAAA;AA+DA,gBAAA,UA/DA;AAAA;AAAA,uBAiEA,KAAA,WAAA,CAAA,aAAA,CAAA,UAAA,CAjEA;;AAAA;AAiEA,gBAAA,SAjEA;AAkEA;AACA,gBAAA,OAAA,CAAA,GAAA,CACA,UAAA,SAAA,CAAA,QAAA,EADA,EAEA,oBAAA,IAAA,CAAA,GAAA,KAAA,EAAA,QAFA,EAGA,SAAA,OAAA,CAAA,KAAA,CAAA,QAAA,IAAA,CAAA,GAAA,KAAA,EAAA,CAAA,CAHA,EAnEA,CAwEA;;AAxEA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAfA,CAAA","sourcesContent":["<template>\n  <div class=\"FaceComparisonMany\">\n    <p>不好意思，请打开浏览器看控制台查看输出日志</p>\n    <br>\n    <img id=\"face1\" src=\"../assets/images/安悦溪1.jpg\" width=\"300\">\n    <img id=\"face2\" src=\"../assets/images/安悦溪2.jpg\" width=\"300\">\n    <img id=\"face3\" src=\"../assets/images/张杰1.jpg\" width=\"300\">\n    <img id=\"face4\" src=\"../assets/images/张杰2.jpg\" width=\"300\">\n    <br>\n    <img id=\"face5\" src=\"../assets/images/张杰3.jpg\" width=\"300\">\n    <img id=\"face6\" src=\"../assets/images/张杰4.jpg\" width=\"300\">\n  </div>\n</template>\n\n<script>\nimport * as faceapi from \"face-api.js\";\n// 本地图片\nimport 安悦溪1 from \"../assets/images/安悦溪1.jpg\";\nimport 安悦溪2 from \"../assets/images/安悦溪2.jpg\";\nimport 张杰1 from \"../assets/images/张杰1.jpg\";\nimport 张杰2 from \"../assets/images/张杰2.jpg\";\nimport 张杰3 from \"../assets/images/张杰3.jpg\";\nimport 张杰4 from \"../assets/images/张杰4.jpg\";\n\nexport default {\n  name: \"FaceComparisonMany\",\n  props: {\n    msg: String\n  },\n  data() {\n    return {\n      // 人脸对比模型数组对象\n      faceMatcher: null\n    };\n  },\n  mounted() {\n    // 同步执行避免报错\n    this.init();\n  },\n  methods: {\n    // 同步执行避免报错\n    async init() {\n      await faceapi.loadFaceRecognitionModel(\"/models\");\n      this.faceMatcher = await this.createFaceMatcher();\n      await this.runArray();\n    },\n    // 人脸对比模型数组对象\n    async createFaceMatcher() {\n      // 模型里的图片，一人多张图片\n      // const picArray = [\n      //   {\n      //     name: \"安悦溪\",\n      //     img: [\"https://dwz.cn/Fi5mUbYK\", \"https://dwz.cn/kXUrwcGG\"]\n      //   },\n      //   {\n      //     name: \"张杰\",\n      //     img: [\"https://dwz.cn/PVtFiWoI\"]\n      //   }\n      // ];\n      const picArray = [\n        {\n          name: \"安悦溪\",\n          img: [安悦溪1, 安悦溪2]\n        },\n        {\n          name: \"张杰\",\n          img: [张杰1, 张杰2]\n        }\n      ];\n\n      // 预存图片转码数组\n      const labeledFaceDescriptors = await Promise.all(\n        picArray.map(async (pic, index) => {\n          console.log(pic.name, pic.img);\n          // 用数组存储图片转码数据\n          const descriptors = [];\n          for (const imgage of pic.img) {\n            const img = await faceapi.fetchImage(imgage);\n            descriptors.push(await faceapi.computeFaceDescriptor(img));\n          }\n          // 返回图片用户和图片转码数组\n          return new faceapi.LabeledFaceDescriptors(pic.name, descriptors);\n        })\n      );\n      console.log(\"图片转码数组对象\", labeledFaceDescriptors);\n      return new faceapi.FaceMatcher(labeledFaceDescriptors);\n    },\n    // 对比图片\n    async runArray() {\n      // 使用对比模型里的图片，用几张张图片与模型组里做对比\n      // const picArrays = [\"https://dwz.cn/ZggSBEtL\", \"https://dwz.cn/U7nR0no0\"];\n      const picArrays = [张杰3, 张杰4, 张杰1];\n      // 遍历对比里图片\n      for (const key in picArrays) {\n        if (picArrays.hasOwnProperty(key)) {\n          const element = picArrays[key];\n          // 数组遍历开始\n          console.log(\"开始对比：\", element);\n          const ts = Date.now();\n          // 获取图片base64\n          const input = await faceapi.fetchImage(element);\n          // 图片转码\n          const descriptor = await faceapi.computeFaceDescriptor(input);\n          // 图片鉴别\n          const bestMatch = await this.faceMatcher.findBestMatch(descriptor);\n          // 鉴别效果\n          console.log(\n            \"鉴别结果：\" + bestMatch.toString(),\n            \"鉴别时间：\" + `${Date.now() - ts} ms`,\n            \"FPS：\" + faceapi.round(1000 / (Date.now() - ts))\n          );\n          // 数组遍历结束\n        }\n      }\n    }\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n</style>\n"],"sourceRoot":"src/views"}]}