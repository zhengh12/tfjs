{"remainingRequest":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\src\\utils\\faceComparison.js","dependencies":[{"path":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\src\\utils\\faceComparison.js","mtime":1573787025662},{"path":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\1\\\\Desktop\\\\tensorflowjs\\\\face-api-demo-vue-master\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport * as faceDetectionControls from \"../utils/faceDetectionControls\";\nimport * as faceapi from \"face-api.js\";\n\nfunction updateResults(_x) {\n  return _updateResults.apply(this, arguments);\n}\n\nfunction _updateResults() {\n  _updateResults = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(faceMatcher) {\n    var inputImgEl, options, results;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (faceDetectionControls.isFaceDetectionModelLoaded()) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            inputImgEl = $('#inputImg').get(0);\n            console.log(inputImgEl);\n            options = faceDetectionControls.getFaceDetectorOptions(); //提取所有面孔并计算结果\n\n            _context.next = 7;\n            return faceapi.detectAllFaces(inputImgEl, options) //class DetectAllFacesTask\n            .withFaceLandmarks() //class DetectAllFaceLandmarksTask\n            .withFaceDescriptors();\n\n          case 7:\n            results = _context.sent;\n            //class ComputeAllFaceDescriptorsTask\n            drawFaceRecognitionResults(results, faceMatcher);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _updateResults.apply(this, arguments);\n}\n\nfunction drawFaceRecognitionResults(results, faceMatcher) {\n  var canvas = $('#overlay').get(0);\n  var inputImgEl = $('#inputImg').get(0);\n  console.log(canvas);\n  faceapi.matchDimensions(canvas, inputImgEl); // resize detection and landmarks in case displayed image is smaller than\n  // original size\n\n  var resizedResults = faceapi.resizeResults(results, inputImgEl); //\n\n  resizedResults.forEach(function (_ref) {\n    var detection = _ref.detection,\n        descriptor = _ref.descriptor;\n    var label = faceMatcher.findBestMatch(descriptor).toString(); //找到最distance最小的对应的label\n\n    var options = {\n      label: label\n    };\n    console.log(label);\n    var drawBox = new faceapi.draw.DrawBox(detection.box, options);\n    drawBox.draw(canvas);\n  });\n}\n\nexport { updateResults };",{"version":3,"sources":["C:\\Users\\1\\Desktop\\tensorflowjs\\face-api-demo-vue-master\\src\\utils\\faceComparison.js"],"names":["faceDetectionControls","faceapi","updateResults","faceMatcher","isFaceDetectionModelLoaded","inputImgEl","$","get","console","log","options","getFaceDetectorOptions","detectAllFaces","withFaceLandmarks","withFaceDescriptors","results","drawFaceRecognitionResults","canvas","matchDimensions","resizedResults","resizeResults","forEach","detection","descriptor","label","findBestMatch","toString","drawBox","draw","DrawBox","box"],"mappings":";;;;AAAA,OAAO,KAAKA,qBAAZ;AACA,OAAO,KAAKC,OAAZ,MAAyB,aAAzB;;SAEeC,a;;;;;;;0BAAf,iBAA6BC,WAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACSH,qBAAqB,CAACI,0BAAtB,EADT;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAKUC,YAAAA,UALV,GAKuBC,CAAC,CAAC,WAAD,CAAD,CAAeC,GAAf,CAAmB,CAAnB,CALvB;AAMIC,YAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ;AACMK,YAAAA,OAPV,GAOoBV,qBAAqB,CAACW,sBAAtB,EAPpB,EASI;;AATJ;AAAA,mBAU0BV,OAAO,CAC1BW,cADmB,CACJP,UADI,EACQK,OADR,EACgB;AADhB,aAEnBG,iBAFmB,GAEA;AAFA,aAGnBC,mBAHmB,EAV1B;;AAAA;AAUUC,YAAAA,OAVV;AAa4B;AAExBC,YAAAA,0BAA0B,CAACD,OAAD,EAASZ,WAAT,CAA1B;;AAfJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAkBA,SAASa,0BAAT,CAAoCD,OAApC,EAA4CZ,WAA5C,EAAyD;AACrD,MAAMc,MAAM,GAAGX,CAAC,CAAC,UAAD,CAAD,CAAcC,GAAd,CAAkB,CAAlB,CAAf;AACA,MAAMF,UAAU,GAAGC,CAAC,CAAC,WAAD,CAAD,CAAeC,GAAf,CAAmB,CAAnB,CAAnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYQ,MAAZ;AACAhB,EAAAA,OAAO,CAACiB,eAAR,CAAwBD,MAAxB,EAAgCZ,UAAhC,EAJqD,CAKrD;AACA;;AACA,MAAMc,cAAc,GAAGlB,OAAO,CAACmB,aAAR,CAAsBL,OAAtB,EAA+BV,UAA/B,CAAvB,CAPqD,CASrD;;AACAc,EAAAA,cAAc,CAACE,OAAf,CAAuB,gBAA+B;AAAA,QAA5BC,SAA4B,QAA5BA,SAA4B;AAAA,QAAjBC,UAAiB,QAAjBA,UAAiB;AACpD,QAAMC,KAAK,GAAGrB,WAAW,CAACsB,aAAZ,CAA0BF,UAA1B,EAAsCG,QAAtC,EAAd,CADoD,CACU;;AAC9D,QAAMhB,OAAO,GAAG;AAAEc,MAAAA,KAAK,EAALA;AAAF,KAAhB;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAYe,KAAZ;AACA,QAAMG,OAAO,GAAG,IAAI1B,OAAO,CAAC2B,IAAR,CAAaC,OAAjB,CAAyBP,SAAS,CAACQ,GAAnC,EAAwCpB,OAAxC,CAAhB;AACAiB,IAAAA,OAAO,CAACC,IAAR,CAAaX,MAAb;AACD,GAND;AAOH;;AAED,SACIf,aADJ","sourcesContent":["import * as faceDetectionControls from \"../utils/faceDetectionControls\"\r\nimport * as faceapi from \"face-api.js\";\r\n\r\nasync function updateResults(faceMatcher) {\r\n    if (!faceDetectionControls.isFaceDetectionModelLoaded()) {\r\n      return\r\n    }\r\n\r\n    const inputImgEl = $('#inputImg').get(0)\r\n    console.log(inputImgEl)\r\n    const options = faceDetectionControls.getFaceDetectorOptions()\r\n    \r\n    //提取所有面孔并计算结果\r\n    const results = await faceapi\r\n      .detectAllFaces(inputImgEl, options)//class DetectAllFacesTask\r\n      .withFaceLandmarks()//class DetectAllFaceLandmarksTask\r\n      .withFaceDescriptors()//class ComputeAllFaceDescriptorsTask\r\n\r\n    drawFaceRecognitionResults(results,faceMatcher)\r\n}\r\n\r\nfunction drawFaceRecognitionResults(results,faceMatcher) {\r\n    const canvas = $('#overlay').get(0)\r\n    const inputImgEl = $('#inputImg').get(0)\r\n    console.log(canvas)\r\n    faceapi.matchDimensions(canvas, inputImgEl)\r\n    // resize detection and landmarks in case displayed image is smaller than\r\n    // original size\r\n    const resizedResults = faceapi.resizeResults(results, inputImgEl)\r\n\r\n    //\r\n    resizedResults.forEach(({ detection, descriptor }) => {\r\n      const label = faceMatcher.findBestMatch(descriptor).toString()//找到最distance最小的对应的label\r\n      const options = { label }\r\n      console.log(label)\r\n      const drawBox = new faceapi.draw.DrawBox(detection.box, options)\r\n      drawBox.draw(canvas)\r\n    })\r\n}\r\n\r\nexport{\r\n    updateResults as updateResults\r\n}"]}]}